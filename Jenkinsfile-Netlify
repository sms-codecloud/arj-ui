// Jenkinsfile ‚Äî React + Vite ‚Üí Netlify (Windows)
pipeline {
  agent { label 'win-agent-1' }
  options { timestamps(); ansiColor('xterm'); disableConcurrentBuilds() }

  parameters {
    string(name: 'UI_SUBDIR', defaultValue: '.', description: 'Path to UI folder (e.g. "." or "web")')
  }

  environment {
    // Do NOT set NODE_ENV=production globally or devDeps (vite) won‚Äôt install
    NPM_CONFIG_CACHE = 'C:\\npm-cache'
    BUILD_DIR        = 'dist'
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        checkout scm
        powershell '''
          $ErrorActionPreference = "Stop"
          git --version
          git log -1 --pretty=format:"Commit: %H%nAuthor: %an <%ae>%nDate:   %ad%nMsg:    %s" | Write-Host
        '''
      }
    }

    stage('Node versions') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          node -v
          npm  -v
        '''
      }
    }

    stage('Install deps (include dev)') {
      steps {
        dir(params.UI_SUBDIR) {
          // Force devDependencies so vite is present even if NODE_ENV is set elsewhere
          powershell '''
            $ErrorActionPreference = "Stop"
            if (-not (Test-Path package.json)) { throw "package.json not found in $(Get-Location)" }
            if (Test-Path package-lock.json) {
              npm ci --no-audit --no-fund --include=dev
            } else {
              npm i  --no-audit --no-fund --include=dev
            }
            npx --yes vite --version
          '''
        }
      }
    }

    stage('Build') {
      steps {
        dir(params.UI_SUBDIR) {
          script {
            def outDir = powershell(returnStdout: true, script: '''
              $ErrorActionPreference = "Stop"
              npm run build | Write-Host

              if (Test-Path dist)      { $out = 'dist' }
              elseif (Test-Path build) { $out = 'build' }
              else { throw "No build output found. Expected 'dist' or 'build'." }

              # Write .builddir safely
              $file = Join-Path $env:WORKSPACE '.builddir'
              try { Remove-Item -LiteralPath $file -Force -ErrorAction SilentlyContinue } catch {}
              [System.IO.File]::WriteAllText($file, $out)

              $out
            ''').trim()
            env.BUILD_DIR = outDir
            echo "Using BUILD_DIR=${env.BUILD_DIR}"
          }
        }
      }
    }

    stage('(Optional) Lint') {
      when { expression { return false } } // flip to true if you want linting to run
      steps {
        dir(params.UI_SUBDIR) {
          powershell 'npm run lint'
        }
      }
    }

    stage('Netlify preflight') {
      steps {
        withCredentials([
          string(credentialsId: 'netlify-token',   variable: 'NETLIFY_AUTH_TOKEN'),
          string(credentialsId: 'netlify-site-id', variable: 'NETLIFY_SITE_ID')
        ]) {
          dir(params.UI_SUBDIR) {
            powershell '''
              $ErrorActionPreference = "Stop"

              # Show CLI & confirm we're authenticated with the token provided
              npx --yes netlify-cli@latest --version

              Write-Host "üîê Checking Netlify auth with provided token..."
              $status = npx --yes netlify-cli@latest status --auth "$env:NETLIFY_AUTH_TOKEN"
              $status | Write-Host

              # List sites we can access with this token and ensure the target site is visible
              Write-Host "üìÑ Listing accessible sites..."
              $sites = npx --yes netlify-cli@latest sites:list --json 2>$null
              if (-not $sites) { throw "Token is valid but no sites are visible with this token." }

              $parsed = $sites | ConvertFrom-Json
              $match  = $parsed | Where-Object { $_.id -eq $env:NETLIFY_SITE_ID }
              if (-not $match) {
                throw "The token does not have access to site id: $env:NETLIFY_SITE_ID. Re-check Site ID or use a Site Deploy Token for that site."
              }
              Write-Host "‚úÖ Token can access site: $($match.name) ($($match.id))"
            '''
          }
        }
      }
    }

  }

  post {
    success {
      echo "‚úÖ Build & Netlify deploy completed. Folder: ${BUILD_DIR}"
      archiveArtifacts artifacts: "${params.UI_SUBDIR}/${BUILD_DIR}/**", fingerprint: false, onlyIfSuccessful: true
    }
    failure {
      echo '‚ùå Deployment failed.'
    }
    // Runs after success/failure blocks
    cleanup {
      cleanWs(deleteDirs: true, patterns: [[pattern: '**/node_modules/**', type: 'INCLUDE']])
    }
  }

}
