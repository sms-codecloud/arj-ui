// Jenkinsfile ‚Äî React ‚Üí Netlify (Windows agent)
pipeline {
  agent { label 'win-agent-1' }
  options { timestamps(); ansiColor('xterm'); disableConcurrentBuilds() }

  environment {
    NODE_ENV         = 'production'
    NPM_CONFIG_CACHE = 'C:\\npm-cache'
    BUILD_DIR        = 'build' // will be overwritten to dist if detected
  }

  stages {
    stage('Prepare & Checkout (latest from GitHub)') {
      steps {
        deleteDir()
        checkout scm
        powershell '''
          $ErrorActionPreference = "Stop"
          git --version
          git log -1 --pretty=format:"Commit: %H%nAuthor: %an <%ae>%nDate:   %ad%nMsg:    %s" | Write-Host
        '''
      }
    }

    stage('Node setup') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          node -v
          npm -v
        '''
      }
    }

    stage('Install deps') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          if (Test-Path package-lock.json) {
            npm ci --no-audit --no-fund
          } else {
            npm i --no-audit --no-fund
          }
        '''
      }
    }

    stage('Build') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          npm run build

          $outDir = if (Test-Path "$env:WORKSPACE\\dist") { "dist" } elseif (Test-Path "$env:WORKSPACE\\build") { "build" } else { "" }
          if (-not $outDir) { throw "No build output found. Expected 'dist' or 'build'." }
          Set-Content -NoNewline -Path "$env:WORKSPACE\\.builddir" -Value $outDir
        '''
      }
    }

    stage('Adopt detected build dir') {
      steps {
        script {
          env.BUILD_DIR = readFile('.builddir').trim()
          echo "Using BUILD_DIR=${env.BUILD_DIR}"
        }
      }
    }

    stage('Deploy to Netlify (via npx)') {
      steps {
        withCredentials([
          string(credentialsId: 'netlify-token',   variable: 'NETLIFY_AUTH_TOKEN'),
          string(credentialsId: 'netlify-site-id', variable: 'NETLIFY_SITE_ID')
        ]) {
          powershell '''
            $ErrorActionPreference = "Stop"
            $dir = Join-Path $env:WORKSPACE $env:BUILD_DIR
            if (-not (Test-Path $dir)) { throw "Build output folder '$dir' not found" }

            # Determine branch name (for freestyle jobs)
            $branch = $env:BRANCH_NAME
            if ([string]::IsNullOrEmpty($branch)) { $branch = (git rev-parse --abbrev-ref HEAD).Trim() }
            $isMain = ($branch -eq "main" -or $branch -eq "master")
            $msg    = "Jenkins #$env:BUILD_NUMBER ($branch @ $env:GIT_COMMIT)"

            # Always use npx so PATH/global installs are irrelevant
            if ($isMain) {
              $out = npx --yes netlify-cli@latest deploy --dir "$dir" --prod `
                    --site "$env:NETLIFY_SITE_ID" --auth "$env:NETLIFY_AUTH_TOKEN" --message "$msg"
            } else {
              $out = npx --yes netlify-cli@latest deploy --dir "$dir" `
                    --site "$env:NETLIFY_SITE_ID" --auth "$env:NETLIFY_AUTH_TOKEN" --message "$msg"
            }

            $out | Write-Host

            # Best-effort URL extraction
            $prodUrl    = ($out | Select-String -Pattern 'Website URL:\\s*(https?://\\S+)' -AllMatches).Matches.Value | ForEach-Object { $_ -replace 'Website URL:\\s*','' }
            $previewUrl = ($out | Select-String -Pattern 'Draft URL:\\s*(https?://\\S+)'   -AllMatches).Matches.Value | ForEach-Object { $_ -replace 'Draft URL:\\s*','' }

            if ($prodUrl)    { Write-Host "‚úÖ Production URL: $prodUrl" }
            if ($previewUrl) { Write-Host "üîé Preview URL:    $previewUrl" }
          '''
        }
      }
    }
  }

  post {
    success {
      echo "‚úÖ Build & Netlify deploy completed. Folder: ${BUILD_DIR}"
      archiveArtifacts artifacts: "${BUILD_DIR}/**", fingerprint: false, onlyIfSuccessful: true
    }
    failure {
      echo '‚ùå Deployment failed.'
    }
    always {
      cleanWs(deleteDirs: true, patterns: [[pattern: '**/node_modules/**', type: 'INCLUDE']])
    }
  }
}
