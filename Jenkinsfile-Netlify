// Jenkinsfile ‚Äî React + Vite ‚Üí Netlify (Windows)
pipeline {
  agent { label 'win-agent-1' }
  options { timestamps(); ansiColor('xterm'); disableConcurrentBuilds() }

  parameters {
    string(name: 'UI_SUBDIR', defaultValue: '.', description: 'Path to UI folder (e.g. "." or "web")')
  }

  environment {
    // Do NOT set NODE_ENV=production globally or devDeps (vite) won‚Äôt install
    NPM_CONFIG_CACHE = 'C:\\npm-cache'
    BUILD_DIR        = 'dist'
  }

  stages {
    stage('Checkout') {
      steps {
        deleteDir()
        checkout scm
        powershell '''
          $ErrorActionPreference = "Stop"
          git --version
          git log -1 --pretty=format:"Commit: %H%nAuthor: %an <%ae>%nDate:   %ad%nMsg:    %s" | Write-Host
        '''
      }
    }

    stage('Node versions') {
      steps {
        powershell '''
          $ErrorActionPreference = "Stop"
          node -v
          npm  -v
        '''
      }
    }

    stage('Install deps (include dev)') {
      steps {
        dir(params.UI_SUBDIR) {
          // Force devDependencies so vite is present even if NODE_ENV is set elsewhere
          powershell '''
            $ErrorActionPreference = "Stop"
            if (-not (Test-Path package.json)) { throw "package.json not found in $(Get-Location)" }
            if (Test-Path package-lock.json) {
              npm ci --no-audit --no-fund --include=dev
            } else {
              npm i  --no-audit --no-fund --include=dev
            }
            npx --yes vite --version
          '''
        }
      }
    }

    stage('Build') {
      steps {
        dir(params.UI_SUBDIR) {
          script {
            def outDir = powershell(returnStdout: true, script: '''
              $ErrorActionPreference = "Stop"
              npm run build | Write-Host

              if (Test-Path dist)      { $out = 'dist' }
              elseif (Test-Path build) { $out = 'build' }
              else { throw "No build output found. Expected 'dist' or 'build'." }

              # Write .builddir safely
              $file = Join-Path $env:WORKSPACE '.builddir'
              try { Remove-Item -LiteralPath $file -Force -ErrorAction SilentlyContinue } catch {}
              [System.IO.File]::WriteAllText($file, $out)

              $out
            ''').trim()
            env.BUILD_DIR = outDir
            echo "Using BUILD_DIR=${env.BUILD_DIR}"
          }
        }
      }
    }

    stage('Compute artifact path') {
      steps {
        script {
          // if UI_SUBDIR == '.', prefix is empty; else 'web/' etc.
          env.UI_PREFIX = (params.UI_SUBDIR?.trim() && params.UI_SUBDIR.trim() != '.') ? "${params.UI_SUBDIR.trim()}/" : ""
          echo "Artifact prefix = '${env.UI_PREFIX}' ; BUILD_DIR = '${env.BUILD_DIR}'"
        }
      }
    }

    stage('(Optional) Lint') {
      when { expression { return false } } // flip to true if you want linting to run
      steps {
        dir(params.UI_SUBDIR) {
          powershell 'npm run lint'
        }
      }
    }

    stage('Netlify Publish (Production)') {
      steps {
        withCredentials([
          string(credentialsId: 'netlify-token',   variable: 'NETLIFY_AUTH_TOKEN'),
          string(credentialsId: 'netlify-site-id', variable: 'NETLIFY_SITE_ID')
        ]) {
          dir(params.UI_SUBDIR) {
            powershell '''
              $ErrorActionPreference = "Stop"

              # sanity: show CLI + whoami on Netlify
              npx --yes netlify-cli@latest --version | Write-Host
              npx --yes netlify-cli@latest status --auth "$env:NETLIFY_AUTH_TOKEN" | Write-Host

              if (-not (Test-Path "$env:BUILD_DIR")) {
                throw "Build output not found at '$env:BUILD_DIR' (cwd: $(Get-Location))"
              }

              # üëâ Production deploy to the correct site, using token + site id explicitly
              $msg = "Jenkins ${env:BUILD_TAG} ${env:GIT_COMMIT}"
              Write-Host "Deploying '$env:BUILD_DIR' to Netlify Production..."
              npx --yes netlify-cli@latest deploy `
                --dir "$env:BUILD_DIR" `
                --prod `
                --auth "$env:NETLIFY_AUTH_TOKEN" `
                --site "$env:NETLIFY_SITE_ID" `
                --message "$msg" `
                --json | Tee-Object -Variable deployJson | Write-Host

              # simple confirmation + fail fast if Netlify returned an error code but CLI didn't
              try { $parsed = $deployJson | ConvertFrom-Json } catch { $parsed = $null }
              if ($parsed -and $parsed.state -and $parsed.state -ne 'ready') {
                throw "Netlify deploy did not reach 'ready' state. State: $($parsed.state)"
              }
            '''
          }
        }
      }
    }

    stage('List build output (diagnostic)') {
      steps {
        dir(params.UI_SUBDIR) {
          powershell '''
            $ErrorActionPreference = "Stop"
            Write-Host "Contents of $(Get-Location):"
            Get-ChildItem -Force
            if (Test-Path "$env:BUILD_DIR") {
              Write-Host "---- $env:BUILD_DIR tree ----"
              Get-ChildItem -Recurse -Force "$env:BUILD_DIR"
            } else {
              Write-Host "Build dir not found: $env:BUILD_DIR"
              exit 1
            }
          '''
        }
      }
    }


  }

  post {
    success {
      echo "‚úÖ Build & Netlify deploy completed. Folder: ${BUILD_DIR}"
      // NO leading './' ‚Äî always workspace-relative and Unix-style slashes
      archiveArtifacts artifacts: "${env.UI_PREFIX}${env.BUILD_DIR}/**", fingerprint: false, onlyIfSuccessful: true
    }
    failure {
      echo '‚ùå Deployment failed.'
    }
    cleanup {
      cleanWs(deleteDirs: true, patterns: [[pattern: '**/node_modules/**', type: 'INCLUDE']])
    }
  }


}
